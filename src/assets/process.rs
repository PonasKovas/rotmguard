//! Process the RawAssets into usable and convenient Assets

use super::raw_parse::{RawAssets, Texture2D};
use crate::config::Config;
use anyhow::{Context, Result, bail};
use either::Either;
use modify::ReverseChangesGuard;
use std::{
	collections::{BTreeMap, BTreeSet, HashMap},
	fs::File,
};
use tracing::info;

// generated by flatbuffers compiler
#[allow(
	unused_imports,
	unsafe_op_in_unsafe_fn,
	dead_code,
	mismatched_lifetime_syntaxes
)]
pub mod spritesheetf;

mod modify;
mod sprites;
mod xml;

pub struct Assets {
	pub sprites: Sprites,
	pub objects: HashMap<u32, Object>,
	pub enchantments: HashMap<u32, Enchantment>,
	pub tiles: HashMap<u32, Tile>,
	/// Reverses the changes to assets file on drop
	reverse_changes_guard: Option<ReverseChangesGuard>,
}

pub struct Sprites {
	pub animated_spritesheets: HashMap<String, Spritesheet>,
	pub spritesheets: HashMap<String, Spritesheet>,
}

// mapping sprite id to actual sprite PNG
pub type Spritesheet = BTreeMap<u32, Vec<u8>>;

pub struct Object {
	pub name: String,
	pub sprite: Option<SpriteId>,
	/// projectile type -> projectile data
	pub projectiles: BTreeMap<u8, ProjectileInfo>,
}

#[derive(Debug, Clone, Copy, PartialEq, PartialOrd)]
pub struct ProjectileInfo {
	// either precise damage or a range
	pub damage: Either<i32, (i32, i32)>,
	pub armor_piercing: bool,
	// bitflags
	pub inflicts_condition: u64,
	pub inflicts_condition2: u64,
}

pub struct SpriteId {
	pub is_animated: bool,
	pub spritesheet: String,
	pub index: u32,
}

pub struct Enchantment {
	pub name: String,
	pub effects: Vec<EnchantmentEffect>,
}

pub enum EnchantmentEffect {
	FlatLifeRegen(f32),
	PercentageLifeRegen(f32),
	Other, // not particularly interested in the gazillion other enchantments
}

pub struct Tile {
	pub damage: Option<i16>,
	pub is_conveyor: bool,
}

impl Assets {
	/// Processes the raw assets, possibly modifying them and replacing on the filesystem
	pub fn process(config: &Config, raw_assets: RawAssets) -> Result<Self> {
		let mut assets = Assets {
			sprites: Sprites::process(&raw_assets).context("processing sprites")?,

			objects: Default::default(),
			enchantments: Default::default(),
			tiles: Default::default(),

			reverse_changes_guard: None,
		};

		// XML data
		// we may want to overwrite some of these objects
		let to_overwrite =
			xml::process_xml(config, &mut assets, raw_assets.xml_assets).context("xml assets")?;

		info!("All assets parsed and processed.");

		if config.settings.edit_assets.enabled {
			assets.reverse_changes_guard = modify::modify(config, to_overwrite)?;
		}

		Ok(assets)
	}
}
