//! Process the RawAssets into usable and convenient Assets

use super::{Assets, raw_parse::RawAssets};
use crate::{assets::Sprites, config::Config};
use anyhow::{Context, Result};
use tracing::info;

// generated by flatbuffers compiler
#[allow(
	unused_imports,
	unsafe_op_in_unsafe_fn,
	dead_code,
	mismatched_lifetime_syntaxes
)]
pub mod spritesheetf;

mod modify;
mod sprites;
mod xml;

pub use modify::ReverseChangesGuard;

impl Assets {
	/// Processes the raw assets, possibly modifying them and replacing on the filesystem
	pub fn process(config: &Config, raw_assets: RawAssets) -> Result<Self> {
		let mut assets = Assets {
			sprites: Sprites::process(&raw_assets).context("processing sprites")?,

			objects: Default::default(),
			enchantments: Default::default(),
			tiles: Default::default(),

			reverse_changes_guard: None,
		};

		// XML data
		// we may want to overwrite some of these objects
		let to_overwrite =
			xml::process_xml(config, &mut assets, raw_assets.xml_assets).context("xml assets")?;

		info!("All assets parsed and processed.");

		if config.settings.edit_assets.enabled {
			assets.reverse_changes_guard = modify::modify(config, to_overwrite)?;
		}

		Ok(assets)
	}
}
